package cj.ocp;

import cj.StartupObserver;
import cj.Tasks;

import javax.inject.Inject;

import static cj.ocp.OCPInput.*;

@SuppressWarnings("unused")
public class OCPStartupObserver extends StartupObserver {
    @Inject
    Tasks tasks;

    @Override
    public void onStart(){
        //TODO: Reconsider default cluster name
        describeInput(clusterName,
            "Name of the cluster to be created",
            "cj.ocp.clusterName",
            c -> c.ocp().clusterName(),
            () -> tasks.generateResourceName(),
            "Generated resource name");
        describeInput(baseDomain,
            "Base domain to use",
            "cj.ocp.baseDomain",
            c -> c.ocp().baseDomain(),
            null,
            "No default, you need to provide this one.");
            //TODO: Load default keyfile
        describeInput(sshKey,
            "SSH key to authorize",
            "cj.ocp.sshKey",
            c -> c.ocp().sshKey(),
            null,
            "No default (yet)");
        describeInput(pullSecret,
            "Your openshift pull secret",
            "cj.ocp.pullSecret",
            c -> c.ocp().pullSecret(),
            null,
            "No default, get yours at https://console.redhat.com/openshift/install/pull-secret");
        describeInput(awsRegion,
            "AWS region to use",
            "cj.ocp.awsRegion",
            c -> c.ocp().awsRegion(),
            null,
            "As configured on AWS CLI");
        describeInput(clusterProfile,
           "Configuration profile to use",
            "cj.ocp.clusterProfile",                        
            c -> c.ocp().clusterProfile(),
            () -> ClusterProfile.standard,
            "Not modified, as generated by openshift-install.",
            ClusterProfile.values());
        describeInput(instanceType,
            "Instance type to use on the cluster",
            "cj.ocp.instanceType",
            c -> c.ocp().instanceType(),
            () -> "m5.xlarge",
            "m5.xlarge");
        describeInput(infrastructureProvider,
            "Infrastructure provider",
            "cj.ocp.infrastructureProvider",
            null,
            () -> OCPInfrastructureProvider.ipi,
            "Installer Provisioned Infrastructre (IPI)",
            OCPInfrastructureProvider.values());
        trace("OpenShift startup completed.");
    }
}
